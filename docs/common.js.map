{"version":3,"sources":["webpack:///./src/app/shared/services/user.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient , HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\n// import { Headers } from '@angular/http';\nimport { User , Iuser } from '../models/user.model';\nimport { SocialUser } from 'angularx-social-login';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  public baseUrl = 'http://resto.thedemo.co//api/';\n  public authHeader: HttpHeaders;\n  public loginHeader;\n\n  public user;\n  token;\n\n  constructor(\n    private http: HttpClient\n  ) {\n    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n\n    if (currentUser) {\n\n     console.log(currentUser);\n     if (currentUser.provider) {\n       console.log('social userrrr');\n       const socialUser: SocialUser = currentUser;\n       this.token = currentUser.authToken;\n\n        this.user = {\n        provider: socialUser.provider,\n        id: socialUser.id,\n        email: socialUser.email,\n        name: socialUser.name,\n        // photoUrl: socialUser.photoUrl,\n        avatar: socialUser.photoUrl,\n        firstName: socialUser.firstName,\n        lastName: socialUser.lastName,\n        authToken: socialUser.authToken,\n        idToken: socialUser.idToken,\n       };\n     } else {\n       console.log('not social user');\n       const nonSocialUser = currentUser;\n       this.token = currentUser.token;\n        this.user = {\n        id: nonSocialUser.id,\n        role_id: nonSocialUser.role_id,\n        name: nonSocialUser.name,\n        email: nonSocialUser.email,\n        avatar: nonSocialUser.avatar,\n        settings: nonSocialUser.settings,\n        created_at: nonSocialUser.created_at,\n        updated_at: nonSocialUser.updated_at,\n        provider: nonSocialUser.provider,\n        provider_id: nonSocialUser.provider_id,\n        token: nonSocialUser.token,\n       };\n     }\n     console.log('currentUser');\n     console.log('this.user' , this.user);\n     console.log('this.token' , this.token);\n    }\n\n\n\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  // updateHttpHeader() {\n  //   this.authHeader = new HttpHeaders();\n  //   if (this.user && this.user.token) {\n  //     this.token = this.user.token;\n  //     this.authHeader.append('Authorization', `Bearer ${this.user.token}`);\n  //   }\n  // }\n\n  createUser(user): Observable<any> {\n\n    console.log(user);\n    let headers = new HttpHeaders();\n    headers = headers\n    .set('Content-Type', 'application/x-www-form-urlencoded')\n    .set('No-Auth', 'True')\n    .set('X-CSRF-TOKEN' , '');\n\n    let body = {\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      password: user.password,\n    };\n    const newUser = `name=${user.name}&email=${user.email}&password=${user.password}&role=${user.role}`;\n\n    return this.http.post('http://resto.thedemo.co//api/user/create', newUser , {headers});\n  }\n\n\n}\n"],"sourceRoot":""}